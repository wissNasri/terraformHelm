# Nom du workflow affiché dans l'onglet "Actions" de GitHub
name: Analyse de Sécurité IaC et Kubernetes

# Déclencheurs du workflow
on:
  # Exécuter sur les push vers la branche main
  push:
    branches:
      - main
  # Exécuter aussi sur les Pull Requests qui ciblent la branche main
  pull_request:
    branches:
      - main

jobs:
  # ----- Job pour l'analyse Terraform et IAM avec Checkov -----
  checkov-scan:
    name: Analyse Checkov (Terraform & IAM)
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: Checkout du code
        uses: actions/checkout@v4

      # Étape 2: Exécuter l'action Checkov et afficher les résultats dans les logs
      - name: Lancer l'analyse Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          # Scanne le répertoire entier.
          directory: .
          # Frameworks à utiliser.
          framework: terraform, secrets
          # Mettez 'false' pour bloquer les PR en cas d'erreur.
          # Si 'false', le job échouera et affichera un 'X' rouge.
          soft_fail: false
          # Affiche les résultats uniquement dans la console (logs du workflow).
          output_format: cli

  # ----- Job pour l'analyse des configurations Kubernetes avec Kubescape -----
  kubescape-scan:
    name: Analyse Kubescape (Fichiers YAML Kubernetes)
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: Checkout du code
        uses: actions/checkout@v4

      # Étape 2: Exécuter l'action Kubescape et afficher les résultats dans les logs
      - name: Lancer l'analyse Kubescape sur les fichiers Helm
        uses: kubescape/github-action@v3
        with:
          # Format de sortie : 'pretty-printer' est le format lisible pour la console.
          format: "pretty-printer"
          # Cible de l'analyse : le dossier contenant vos fichiers de valeurs Helm
          # On scanne les frameworks de sécurité NSA et MITRE
          scanCommand: "scan framework nsa,mitre helm-values/"
          # Code de sortie pour faire échouer le pipeline.
          # '0' signifie que le job échouera si des problèmes sont trouvés.
          # Mettez '1' si vous ne voulez pas qu'il échoue.
          exitCode: "0"

