name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  # ... (section 'on' inchangée)
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" or "destroy"'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'If action=destroy, type "destroy-all-addons" to confirm.'
        required: false

jobs:
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
    # ===================================================================
    # ÉTAPES DE CONFIGURATION ET DE DÉPLOIEMENT (INCHANGÉES)
    # ===================================================================
    - name: Checkout source code 
      uses: actions/checkout@v4
    - name: Configure Kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
        kubectl get nodes -o wide
    - name: Terraform Init
      run: terraform init
    - name: Apply Logic
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform plan -no-color -out=plan-step1
        terraform apply -auto-approve -input=false plan-step1
        sleep 30
        terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
        terraform apply -auto-approve -input=false plan-step2
    - name: Validate Terraform Plan (on push)
      if: github.event_name == 'push'
      run: terraform plan -no-color

    # ===================================================================
    # ÉTAPE DE NETTOYAGE (MODIFIÉE : SANS LE NETTOYAGE DES PVC)
    # ===================================================================
    - name: Force-Clean Application Namespaces (if destroying)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- [START] Pre-Destroy Cleanup ---"
        
        # LA PARTIE SUR LE NETTOYAGE DES PVC A ÉTÉ SUPPRIMÉE
        
        echo "--- Step 1: Force-cleaning application namespaces (quiz, quiz-staging) ---"
        for ns in quiz quiz-staging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Initiating deletion for namespace '$ns'..."
            kubectl delete ns $ns &
            sleep 10 # Attente pour que le statut passe à "Terminating"
            
            # Si le namespace est toujours là, il est bloqué. On force.
            if kubectl get ns $ns > /dev/null 2>&1; then
              echo "Namespace '$ns' is stuck. Forcing finalizer removal..."
              kubectl get namespace $ns -o json | jq '.spec.finalizers = []' | kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f -
            else
              echo "Namespace '$ns' deleted successfully."
            fi
          else
            echo "Namespace '$ns' does not exist, skipping."
          fi
        done
        
        echo "--- [END] Pre-destroy cleanup finished. ---"
        kubectl get ns

    # ===================================================================
    # ÉTAPE FINALE : TERRAFORM DESTROY
    # ===================================================================
    - name: Terraform Destroy (DANGEROUS)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "WARNING: Proceeding with 'terraform destroy' after cleanup."
        terraform destroy -auto-approve -var="deploy_app_of_apps=true"
