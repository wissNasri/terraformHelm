# Nom du fichier : .github/workflows/deploy-addons.yml
# DESCRIPTION : Pipeline pour déployer les add-ons Kubernetes (Helm charts)
#               via Terraform, en gérant les dépendances de CRD.

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  # Se déclenche sur un push pour valider la configuration
  push:
    branches:
      - main
    paths:
      - 'terraform/apps/**'
      - '.github/workflows/deploy-addons.yml'

  # Permet un déclenchement manuel pour les actions de déploiement ou de destruction
  workflow_dispatch:
    inputs:
      action:
        description: 'Action à exécuter : "apply" pour déployer, "destroy" pour supprimer'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      confirm_destroy:
        description: 'Si action=destroy, tapez "destroy-all-addons" pour confirmer.'
        required: false

jobs:
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    
    # Cible le runner auto-hébergé qui a accès au cluster
    runs-on: ["self-hosted", "aws-private-runner"]

    defaults:
      run:
        shell: bash
        # Le répertoire de travail pour toutes les commandes Terraform
        working-directory: ./terraform/apps

    steps:
      # Étape 1 : Récupérer le code du dépôt
      - name: Checkout source code
        uses: actions/checkout@v4

      # Étape 2 : Configurer l'accès à Kubernetes via le rôle IAM de l'instance
      - name: Configure Kubeconfig for EKS
        run: |
          echo "Configuring kubectl to connect to EKS cluster..."
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          echo "Kubeconfig configured successfully!"
          
          echo "--- Verifying cluster access ---"
          kubectl get nodes -o wide
          echo "--------------------------------"

      # Étape 3 : Initialiser Terraform
      - name: Terraform Init
        id: init
        run: terraform init

      # ===================================================================
      # LOGIQUE DE DÉPLOIEMENT EN DEUX TEMPS (POUR APPLY MANUEL)
      # ===================================================================

      # Étape 4.1 : Plan et Apply des Add-ons principaux (SANS l'App of Apps)
      # Cela installe ArgoCD et ses CRD en premier.
      - name: Plan and Apply Core Add-ons
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "--- Planning core add-ons (App of Apps disabled by default) ---"
          terraform plan -no-color -out=plan-step1
          
          echo "--- Applying core add-ons ---"
          terraform apply -auto-approve -input=false plan-step1

      # Étape 4.2 : Plan et Apply de l'App of Apps (SEULEMENT)
      # Cette étape s'exécute après la première, garantissant que les CRD existent.
      - name: Plan and Apply App-of-Apps
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "--- Waiting 30 seconds for CRDs to be fully recognized by the API server ---"
          sleep 30

          echo "--- Planning App-of-Apps resource (by enabling it with a variable) ---"
          # On exécute un second plan en activant la variable "deploy_app_of_apps"
          terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"

          echo "--- Applying App-of-Apps resource ---"
          terraform apply -auto-approve -input=false plan-step2

      # ===================================================================
      # LOGIQUE DE VALIDATION (POUR PUSH)
      # ===================================================================

      # Étape 5 : Valide uniquement le plan de base lors d'un push
      - name: Validate Terraform Plan (on push)
        if: github.event_name == 'push'
        run: |
          echo "Validating base plan (without App-of-Apps)..."
          terraform plan -no-color

      # ===================================================================
      # LOGIQUE DE DESTRUCTION (POUR DESTROY MANUEL)
      # ===================================================================

      # Étape 6 : Détruit toutes les ressources, y compris l'App of Apps
      - name: Terraform Destroy (DANGEROUS)
        if: |
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.action == 'destroy' &&
          github.event.inputs.confirm_destroy == 'destroy-all-addons'
        run: |
          echo "WARNING: Preparing to destroy all add-ons managed by Terraform."
          # Pour la destruction, on doit activer la variable pour que Terraform "voie"
          # la ressource app-of-apps et puisse la détruire.
          terraform destroy -auto-approve -var="deploy_app_of_apps=true"
