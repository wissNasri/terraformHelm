# ===================================================================
# NOM DU FICHIER : .github/workflows/deploy-addons.yml
# VERSION AVEC SCAN DE SÉCURITÉ CHECKOV INTÉGRÉ (CORRIGÉ)
# ===================================================================

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" or "destroy"'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'If action=destroy, type "destroy-all-addons" to confirm.'
        required: false

jobs:
  # ===================================================================
  # JOB DE SCAN CHECKOV CORRIGÉ ET SIMPLIFIÉ
  # ===================================================================
  security_scan:
    name: "Security: Scan Add-ons IaC with Checkov"
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permission nécessaire pour que l'action checkout puisse lire le code

    steps:
    - name: Checkout source code 
      uses: actions/checkout@v4

    - name: Run Checkov scan and generate JSON report
      uses: bridgecrewio/checkov-action@master
      with:
        # Cible spécifiquement le répertoire des applications
        directory: ./terraform/apps
        framework: terraform
        # MODIFICATION : Génère uniquement le rapport JSON comme demandé
        output_format: json
        output_file_path: checkov-report.json
        # Le pipeline s'arrêtera si une erreur est trouvée.
        # Pour autoriser la continuation, changez la valeur ci-dessous pour 'true'.
        soft_fail: false

    - name: Upload Checkov JSON report as artifact
      # MODIFICATION : Cette étape s'exécutera toujours, même si l'étape précédente échoue,
      # pour que vous ayez toujours le rapport d'erreurs à analyser.
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: checkov-addons-report-json
        path: checkov-report.json

  # ===================================================================
  # JOB DE DÉPLOIEMENT (INCHANGÉ)
  # ===================================================================
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    needs: security_scan
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
    # --- Le reste des étapes est inchangé ---
    - name: Checkout source code 
      uses: actions/checkout@v4
    - name: Configure Kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ vars.ADDONS_AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }}
        kubectl get nodes -o wide
    - name: Terraform Init
      run: terraform init
    - name: Apply Logic
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform plan -no-color -out=plan-step1
        terraform apply -auto-approve -input=false plan-step1
        sleep 30
        terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
        terraform apply -auto-approve -input=false plan-step2
    - name: Validate Terraform Plan (on push)
      if: github.event_name == 'push'
      run: terraform plan -no-color

    # --- ÉTAPE DE NETTOYAGE HYBRIDE (INCHANGÉE) ---
    - name: Hybrid Cleanup (if destroying)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- [START] Hybrid Pre-Destroy Cleanup ---"
        for ns in quiz quiz-staging logging ; do
          if kubectl get ns "$ns" > /dev/null 2>&1; then
            echo "Initiating aggressive deletion for namespace '$ns'..."
            kubectl delete ns "$ns" &
            sleep 10
            if kubectl get ns "$ns" > /dev/null 2>&1; then
              echo "Namespace '$ns' is stuck. Forcing finalizer removal..."
              kubectl get namespace "$ns" -o json | jq '.spec.finalizers = []' | kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f - || echo "Finalizer removal for $ns failed, but continuing."
            else
              echo "Namespace '$ns' deleted successfully."
            fi
          else
            echo "Namespace '$ns' does not exist, skipping."
          fi
        done
        echo "--- [PAUSE] Waiting 60 seconds for resources to disappear and PVCs to be released... ---"
        sleep 60
        echo "--- [END] Pre-destroy cleanup finished. Verifying PV status. ---"
        kubectl get pv

    # --- ÉTAPE FINALE : TERRAFORM DESTROY (INCHANGÉE) ---
    - name: Terraform Destroy (DANGEROUS)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "WARNING: Proceeding with 'terraform destroy' for remaining infrastructure."
        terraform destroy -auto-approve -var="deploy_app_of_apps=true"
