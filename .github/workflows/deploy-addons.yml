# ===================================================================
# FICHIER : .github/workflows/deploy-addons.yml (Logique de destruction corrigée)
# DESCRIPTION : Pipeline qui orchestre la destruction en nettoyant
# les applications avec état (Elasticsearch) AVANT le reste.
# ===================================================================

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" or "destroy"'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'If action=destroy, type "destroy-all-addons" to confirm.'
        required: false

jobs:
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
    # ===================================================================
    # CONFIGURATION ET APPLY (INCHANGÉ)
    # ===================================================================
    - name: Checkout source code 
      uses: actions/checkout@v4

    - name: Configure Kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
        kubectl get nodes -o wide

    - name: Terraform Init
      run: terraform init

    - name: Apply Logic
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform plan -no-color -out=plan-step1
        terraform apply -auto-approve -input=false plan-step1
        sleep 30
        terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
        terraform apply -auto-approve -input=false plan-step2

    - name: Validate Terraform Plan (on push)
      if: github.event_name == 'push'
      run: terraform plan -no-color

    # ===================================================================
    # NOUVELLE LOGIQUE DE DESTRUCTION ORCHESTRÉE
    # ===================================================================
    - name: "Pre-Destroy Step 1: Uninstall Stateful Apps"
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- Uninstalling stateful applications to initiate pod termination ---"
        # On désinstalle Elasticsearch pour que son StatefulSet soit supprimé
        helm uninstall elasticsearch -n logging --ignore-not-found || echo "Elasticsearch chart not found or failed to uninstall, continuing..."
        
        # On supprime aussi les workloads des autres namespaces
        for ns in quiz quiz-staging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Deleting workloads in namespace '$ns'..."
            kubectl delete statefulsets,deployments --all -n $ns --ignore-not-found=true
          fi
        done

    - name: "Pre-Destroy Step 2: Clean up PVCs and Wait"
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- Deleting all PVCs to unblock pod termination ---"
        # On supprime les PVC de tous les namespaces concernés
        for ns in quiz quiz-staging logging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Deleting PVCs in namespace '$ns'..."
            kubectl delete pvc --all -n $ns --ignore-not-found=true
          fi
        done

        echo "--- Waiting for pods to terminate ---"
        for ns in quiz quiz-staging logging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Waiting up to 3 minutes for pods in '$ns' to be deleted..."
            kubectl wait --for=delete pod --all -n $ns --timeout=3m --ignore-not-found=true || echo "Pod wait timeout in $ns, continuing..."
          fi
        done

    - name: "Pre-Destroy Step 3: Force-Clean Application Namespaces"
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- Force-cleaning remaining application namespaces ---"
        for ns in quiz quiz-staging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Force deleting namespace '$ns'..."
            kubectl get namespace $ns -o json | jq '.spec.finalizers=[]' | kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f - || echo "Failed to force delete namespace $ns, it might have been deleted already."
          else
            echo "Namespace '$ns' does not exist, skipping."
          fi
        done
        echo "--- Pre-destroy cleanup finished. ---"

    # ===================================================================
    # DESTRUCTION FINALE AVEC TERRAFORM
    # ===================================================================
    - name: Terraform Destroy (DANGEROUS)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "WARNING: Proceeding with 'terraform destroy' after pre-cleanup."
        terraform destroy -auto-approve -var="deploy_app_of_apps=true"
