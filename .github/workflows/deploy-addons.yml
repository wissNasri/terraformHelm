# ====================================================================================
# WORKFLOW POUR LES APPLICATIONS ET ADD-ONS KUBERNETES
# Gère le déploiement, la destruction et le nettoyage des ressources DANS le cluster.
# ====================================================================================
name: "APPS: Deploy, Destroy & Cleanup Kubernetes Apps/Add-ons"

on:
  # Déclenchement sur push vers le répertoire des applications
  push:
    branches:
      - main
    paths:
      - 'terraform/apps/**'
      - '.github/workflows/deploy-addons.yml'

  # Déclenchement manuel pour les actions 'apply' ou 'destroy'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action : "apply" pour déployer, "destroy" pour tout supprimer'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  # ===================================================================
  # JOB 1 : NETTOYAGE DES RESSOURCES DYNAMIQUES DE KUBERNETES
  # Ce job s'exécute en premier, mais UNIQUEMENT pour l'action "destroy".
  # Il supprime les Ingress, Services LoadBalancer et PVC créés par les applications.
  # ===================================================================
  cleanup-k8s-apps:
    name: "1. Cleanup K8s App Resources (Ingress, LB-Services, PVCs)"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    # S'exécute sur le runner qui a accès au cluster
    runs-on: ["self-hosted", "aws-private-runner"]

    steps:
      # Étape 1.1 : Se connecter au cluster EKS
      - name: Configure Kubeconfig for EKS
        run: |
          echo "Configuring kubectl to connect to EKS cluster 'tws-eks-cluster'..."
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          echo "Kubeconfig configured successfully."

      # Étape 1.2 : Supprimer les ressources Kubernetes qui créent des dépendances AWS
      - name: Delete AWS-dependent Kubernetes resources
        run: |
          echo "--- Deleting ALL Ingress resources to release Application Load Balancers ---"
          kubectl delete ingress --all --all-namespaces --ignore-not-found=true
          
          echo "--- Deleting ALL Services of type LoadBalancer to release Network Load Balancers ---"
          kubectl delete service --all --all-namespaces --field-selector=spec.type=LoadBalancer --ignore-not-found=true
          
          echo "--- Deleting ALL PersistentVolumeClaims to release EBS Volumes ---"
          kubectl delete pvc --all --all-namespaces --ignore-not-found=true
          
          echo "Kubernetes resource deletion initiated. Waiting 3 minutes for AWS controllers to de-provision resources..."
          sleep 180
          echo "Wait time complete. Proceeding to destroy Helm charts."

  # ===================================================================
  # JOB 2 : DÉPLOIEMENT OU DESTRUCTION DES ADD-ONS (HELM CHARTS)
  # Ce job gère les charts Helm (ArgoCD, Prometheus, etc.) via Terraform.
  # ===================================================================
  manage-addons-via-terraform:
    name: "2. Terraform for Kubernetes Add-ons"
    
    # Dépend du job de nettoyage (uniquement en cas de 'destroy')
    needs: cleanup-k8s-apps
    
    # Condition : S'exécute toujours, sauf si c'est un 'destroy' et que le nettoyage a échoué.
    if: always() && (github.event.inputs.action != 'destroy' || needs.cleanup-k8s-apps.result == 'success')
    
    runs-on: ["self-hosted", "aws-private-runner"]
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          echo "--- Verifying cluster access before Terraform ---"
          kubectl get nodes -o wide
          echo "--------------------------------"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -no-color -out=planfile

      - name: Terraform Apply (Deploy Add-ons)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false planfile

      - name: Terraform Destroy (Remove Add-ons)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          echo "WARNING: Destroying all Helm-managed add-ons..."
          terraform destroy -auto-approve
