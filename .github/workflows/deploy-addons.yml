# Nom du fichier : .github/workflows/deploy-addons.yml
# DESCRIPTION : Pipeline pour détruire les add-ons avec un nettoyage FORCÉ et CIBLÉ.

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  # ... (section 'on' inchangée)
  push:
    branches: 
      - main 
    paths: 
      - 'terraform/apps/**'
      - '.github/workflows/deploy-addons.yml'
  pull_request:
    branches: 
      - main 
    paths: 
      - 'terraform/apps/**'
      - '.github/workflows/deploy-addons.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action à exécuter : "apply" pour déployer, "destroy" pour supprimer'
        required: true
        default: 'apply'
        type: choice
        options:
        - apply
        - destroy
      confirm_destroy:
        description: 'Si action=destroy, tapez "destroy-all-addons" pour confirmer.'
        required: false

jobs:
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    
    runs-on: ["self-hosted", "aws-private-runner"]

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
    # ===================================================================
    # ÉTAPES DE CONFIGURATION ET DE DÉPLOIEMENT (INCHANGÉES)
    # ===================================================================
    - name: Checkout source code 
      uses: actions/checkout@v4

    - name: Configure Kubeconfig for EKS
      run: |
        echo "Configuring kubectl to connect to EKS cluster..."
        aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
        echo "Kubeconfig configured successfully!"
        kubectl get nodes -o wide
    
    - name: Terraform Init
      id: init
      run: terraform init

    - name: Plan and Apply Core Add-ons
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform plan -no-color -out=plan-step1
        terraform apply -auto-approve -input=false plan-step1

    - name: Plan and Apply App-of-Apps
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        sleep 30
        terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
        terraform apply -auto-approve -input=false plan-step2

    - name: Validate Terraform Plan (on push)
      if: github.event_name == 'push'
      run: terraform plan -no-color

    # ===================================================================
    # ÉTAPE DE NETTOYAGE CIBLÉ (AVANT LE DESTROY) - VERSION MODIFIÉE
    # ===================================================================
    - name: Force-Clean Targeted Stateful Resources and Namespaces (if destroying)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- [START] Targeted Pre-Destroy Cleanup ---"
        
        # CHANGEMENT : On cible uniquement les namespaces qui posent problème.
        # 'logging' pour Elasticsearch, et les namespaces de l'application quiz.
        NAMESPACES_TO_CLEAN="logging quiz quiz-staging"
        
        echo "--- Step 1: Force-cleaning PersistentVolumeClaims in targeted namespaces ---"
        for ns in $NAMESPACES_TO_CLEAN; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "--- Cleaning PVCs in namespace: $ns ---"
            
            # Supprime tous les PVCs dans le namespace sans attendre
            kubectl delete pvc --all -n $ns --wait=false
            
            sleep 10 # Laisse le temps aux ressources de passer en état "Terminating"
            
            # Cherche les PVCs bloqués et retire leurs finalizers pour forcer la suppression
            PVCS=$(kubectl get pvc -n $ns -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)
            if [ -n "$PVCS" ]; then
              for pvc in $PVCS; do
                echo "Patching PVC '$pvc' in namespace '$ns' to remove finalizers..."
                kubectl patch pvc $pvc -n $ns -p '{"metadata":{"finalizers":null}}' --type=merge
              done
            else
              echo "No PVCs found or already deleted in namespace '$ns'."
            fi
          else
            echo "Namespace '$ns' not found for PVC cleanup, skipping."
          fi
        done

        echo "--- PVC cleanup initiated. Waiting 30 seconds for EBS volumes to be processed by AWS... ---"
        sleep 30 # Délai crucial pour laisser le temps au driver CSI de communiquer avec AWS

        echo "--- Step 2: Force-cleaning application namespaces (quiz, quiz-staging) ---"
        # Note : On ne nettoie pas le namespace 'logging' ici, car il est géré par Terraform.
        # On se contente de supprimer les namespaces applicatifs qui sont gérés par ArgoCD.
        for ns in quiz quiz-staging; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "Initiating deletion for namespace '$ns'..."
            kubectl delete ns $ns &
            sleep 10
            
            if kubectl get ns $ns > /dev/null 2>&1; then
              echo "Namespace '$ns' is stuck. Forcing finalizer removal..."
              kubectl get namespace $ns -o json | jq '.spec.finalizers = []' | kubectl replace --raw "/api/v1/namespaces/$ns/finalize" -f -
            else
              echo "Namespace '$ns' deleted successfully."
            fi
          else
            echo "Namespace '$ns' does not exist, skipping."
          fi
        done
        
        echo "--- [END] Targeted pre-destroy cleanup finished. ---"
        kubectl get ns

    # ===================================================================
    # ÉTAPE FINALE : TERRAFORM DESTROY (INCHANGÉE)
    # ===================================================================
    - name: Terraform Destroy (DANGEROUS)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "WARNING: Proceeding with 'terraform destroy' after cleanup."
        terraform destroy -auto-approve -var="deploy_app_of_apps=true"
