# Nom du fichier : .github/workflows/deploy-addons.yml
# DESCRIPTION : Pipeline de destruction avec nettoyage FORCÉ et CIBLÉ (LA BONNE APPROCHE POUR VOTRE PROJET)

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  # ... (inchangé)
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" or "destroy"'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'If action=destroy, type "destroy-all-addons" to confirm.'
        required: false

jobs:
  deploy-addons:
    name: "Terraform for Kubernetes Add-ons"
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
    # ... (étapes de configuration et de déploiement inchangées) ...
    - name: Checkout source code 
      uses: actions/checkout@v4
    - name: Configure Kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
        kubectl get nodes -o wide
    - name: Terraform Init
      run: terraform init
    - name: Apply logic...
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
      run: |
        terraform plan -no-color -out=plan-step1
        terraform apply -auto-approve -input=false plan-step1
        sleep 30
        terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
        terraform apply -auto-approve -input=false plan-step2
    - name: Validate Plan on push
      if: github.event_name == 'push'
      run: terraform plan -no-color

    # ===================================================================
    # ÉTAPE DE NETTOYAGE FORCÉ (AVANT TERRAFORM DESTROY)
    # ===================================================================
    - name: Force-Clean Targeted Stateful Resources (if destroying)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "--- [START] Aggressive Pre-Destroy Cleanup ---"
        
        # On cible les namespaces contenant les PVCs à supprimer
        NAMESPACES_TO_CLEAN="logging quiz quiz-staging"
        
        echo "--- Step 1: Force-cleaning PersistentVolumeClaims to release EBS volumes ---"
        for ns in $NAMESPACES_TO_CLEAN; do
          if kubectl get ns $ns > /dev/null 2>&1; then
            echo "--- Cleaning PVCs in namespace: $ns ---"
            
            # On supprime les PVCs sans attendre
            kubectl delete pvc --all -n $ns --wait=false
            sleep 10 # Pause pour que le statut passe à "Terminating"
            
            # On force la suppression des PVCs bloqués
            PVCS=$(kubectl get pvc -n $ns -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true)
            if [ -n "$PVCS" ]; then
              for pvc in $PVCS; do
                echo "Patching PVC '$pvc' in '$ns' to remove finalizers..."
                kubectl patch pvc $pvc -n $ns -p '{"metadata":{"finalizers":null}}' --type=merge
              done
            fi
          fi
        done

        echo "--- PVC cleanup initiated. Waiting 30 seconds for CSI driver to act... ---"
        sleep 30 # Délai CRUCIAL
        
        echo "--- [END] Pre-destroy cleanup finished. ---"

    # ===================================================================
    # ÉTAPE FINALE : TERRAFORM DESTROY
    # ===================================================================
    - name: Terraform Destroy (DANGEROUS)
      if: |
        github.event_name == 'workflow_dispatch' &&
        github.event.inputs.action == 'destroy' &&
        github.event.inputs.confirm_destroy == 'destroy-all-addons'
      run: |
        echo "WARNING: Proceeding with 'terraform destroy' after cleanup."
        terraform destroy -auto-approve -var="deploy_app_of_apps=true"
