# Nom du fichier : .github/workflows/deploy-addons.yml
# VERSION FINALE AMÉLIORÉE : Idempotente et logique de destruction optimisée.

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" (déployer) ou "destroy" (détruire)'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'Si action=destroy, tapez "destroy-all-addons" pour confirmer.'
        required: false

jobs:
  # ===================================================================
  # JOB 1 : DÉPLOIEMENT (INCHANGÉ)
  # ===================================================================
  deploy-addons:
    name: "Terraform Apply for Add-ons"
    if: github.event.inputs.action == 'apply' || github.event_name == 'push'
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes -o wide
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "--- Running Terraform Apply: Step 1 (Core Add-ons) ---"
          terraform plan -no-color -out=plan-step1
          terraform apply -auto-approve -input=false plan-step1
          echo "--- Waiting 30 seconds for add-ons to stabilize ---"
          sleep 30
          echo "--- Running Terraform Apply: Step 2 (App-of-Apps) ---"
          terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
          terraform apply -auto-approve -input=false plan-step2
      - name: Validate Terraform Plan (on push to main)
        if: github.event_name == 'push'
        run: terraform plan -no-color

  # ===================================================================
  # JOB 2 : DESTRUCTION ORCHESTRÉE (LOGIQUE RECTIFIÉE)
  # ===================================================================
  destroy-addons:
    name: "Orchestrated Destroy for Add-ons"
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy == 'destroy-all-addons'
    
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes

      # --- ÉTAPE 1 : DESTRUCTION DE L'INFRASTRUCTURE TERRAFORM ---
      - name: "Execute Terraform Destroy (to trigger pod termination)"
        run: |
          echo "--- [START] Running terraform destroy to delete Helm releases and other resources ---"
          terraform init
          # Cette commande va supprimer les helm_release, ce qui mettra les pods en état 'Terminating'.
          terraform destroy -auto-approve -var="deploy_app_of_apps=true"
          echo "--- [END] Terraform destroy command finished. ---"

      # --- ÉTAPE 2 : NETTOYAGE FINAL DES RESSOURCES PERSISTANTES ---
      - name: "Post-Destroy: Clean up Persistent Resources"
        run: |
          echo "--- [START] Cleaning up remaining PVCs and waiting for pods to terminate ---"
          
          # On supprime les PVCs de TOUS les namespaces applicatifs pour débloquer leur terminaison.
          for ns in quiz quiz-staging logging; do
            if kubectl get ns $ns > /dev/null 2>&1; then
              echo "Deleting PVCs in namespace '$ns'..."
              kubectl delete pvc --all -n $ns --ignore-not-found=true
            fi
          done
          
          # On attend que les pods qui utilisaient ces PVCs soient bien terminés.
          # C'est la garantie finale que le cluster est propre.
          echo "Waiting up to 5 minutes for pods in stateful namespaces to terminate..."
          for ns in quiz quiz-staging logging; do
             if kubectl get ns $ns > /dev/null 2>&1; then
                kubectl wait --for=delete pod --all -n $ns --timeout=5m --ignore-not-found=true || echo "Timeout or no pods found in $ns to wait for."
             fi
          done

          echo "--- [END] Final cleanup complete. ---"
