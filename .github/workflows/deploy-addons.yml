# Nom du fichier : .github/workflows/deploy-addons.yml
# DESCRIPTION : Pipeline pour déployer ou détruire les add-ons Kubernetes.
# La destruction est orchestrée pour garantir un nettoyage complet et sans ressources orphelines
# en supprimant les pods et les PVCs de manière contrôlée avant la destruction de l'infrastructure.

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" (déployer) ou "destroy" (détruire)'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'Si action=destroy, tapez "destroy-all-addons" pour confirmer.'
        required: false

jobs:
  # ===================================================================
  # JOB 1 : DÉPLOIEMENT OU VALIDATION (LOGIQUE "APPLY")
  # ===================================================================
  deploy-addons:
    name: "Terraform Apply for Add-ons"
    if: github.event.inputs.action == 'apply' || github.event_name == 'push'
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes -o wide
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "--- Running Terraform Apply: Step 1 (Core Add-ons) ---"
          terraform plan -no-color -out=plan-step1
          terraform apply -auto-approve -input=false plan-step1
          echo "--- Waiting 30 seconds for add-ons to stabilize ---"
          sleep 30
          echo "--- Running Terraform Apply: Step 2 (App-of-Apps) ---"
          terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
          terraform apply -auto-approve -input=false plan-step2
      - name: Validate Terraform Plan (on push to main)
        if: github.event_name == 'push'
        run: terraform plan -no-color

  # ===================================================================
  # JOB 2 : DESTRUCTION ORCHESTRÉE (LOGIQUE "DESTROY")
  # ===================================================================
  destroy-addons:
    name: "Orchestrated Destroy for Add-ons"
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy == 'destroy-all-addons'
    
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes

      # --- ÉTAPE 1 : INITIATION DE LA SUPPRESSION DES APPLICATIONS ---
      - name: "Pre-Destroy: Initiate Deletion of All Applications"
        run: |
          echo "--- [START] Initiating deletion for all stateful applications ---"
          
          # Installation et login à Argo CD
          echo "Installing Argo CD CLI and logging in..."
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          ARGO_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d )
          argocd login argocd.iovision.site:443 --username admin --password "$ARGO_PASSWORD" --insecure --grpc-web
          
          # On lance la suppression des applications Argo CD
          for app in quiz-prod quiz-staging; do
            if argocd app get $app > /dev/null 2>&1; then
              echo "Initiating deletion for Argo CD application '$app'..."
              argocd app delete $app --cascade=true --yes
            fi
          done
          
          # On désinstalle le chart Helm d'Elasticsearch pour supprimer ses pods
          echo "Uninstalling Elasticsearch to release its pods..."
          helm uninstall elasticsearch -n logging --wait --timeout 5m || echo "Elasticsearch chart not found or already uninstalled."
          
          echo "--- [END] Application deletion initiated. ---"

      # --- ÉTAPE 2 : NETTOYAGE DES PVCs ET ATTENTE DE LA FIN DES PODS ---
      - name: "Pre-Destroy: Delete All Application PVCs and Wait for Pods"
        run: |
          echo "--- [START] Deleting all application PVCs to unblock termination ---"
          
          # On supprime les PVCs de TOUS les namespaces applicatifs pour initier leur terminaison
          for ns in quiz quiz-staging logging; do
            if kubectl get ns $ns > /dev/null 2>&1; then
              echo "Deleting PVCs in namespace '$ns'..."
              kubectl delete pvc --all -n $ns || echo "No PVCs to delete in $ns or error occurred."
            fi
          done
          
          # On attend que les pods qui utilisaient ces PVCs soient bien terminés
          echo "Waiting up to 5 minutes for pods in stateful namespaces to terminate..."
          for ns in quiz quiz-staging logging; do
             if kubectl get ns $ns > /dev/null 2>&1; then
                # Cette commande attend qu'il n'y ait plus aucun pod dans le namespace
                kubectl wait --for=delete pod --all -n $ns --timeout=5m || echo "Timeout waiting for pods in $ns to delete. They might be stuck."
             fi
          done

          echo "--- [END] PVC and Pod cleanup finished. ---"

      # --- ÉTAPE 3 : DESTRUCTION FINALE DE L'INFRASTRUCTURE ---
      - name: "Execute Terraform Destroy (DANGEROUS)"
        run: |
          echo "WARNING: All pre-destroy cleanup steps are done. Proceeding with 'terraform destroy'."
          terraform init
          terraform destroy -auto-approve -var="deploy_app_of_apps=true"
