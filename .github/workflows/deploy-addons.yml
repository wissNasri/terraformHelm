# Nom du fichier : .github/workflows/deploy-addons.yml
# VERSION FINALE ROBUSTE : Gère les finalizers et l'ordre de destruction.

name: "APPS: Deploy or Destroy Kubernetes Add-ons"

on:
  push:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  pull_request:
    branches: [main]
    paths: ['terraform/apps/**', '.github/workflows/deploy-addons.yml']
  workflow_dispatch:
    inputs:
      action:
        description: 'Action: "apply" (déployer) ou "destroy" (détruire)'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]
      confirm_destroy:
        description: 'Si action=destroy, tapez "destroy-all-addons" pour confirmer.'
        required: false

jobs:
  # ===================================================================
  # JOB 1 : DÉPLOIEMENT (INCHANGÉ)
  # ===================================================================
  deploy-addons:
    name: "Terraform Apply for Add-ons"
    if: github.event.inputs.action == 'apply' || github.event_name == 'push'
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes -o wide
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          echo "--- Running Terraform Apply: Step 1 (Core Add-ons) ---"
          terraform plan -no-color -out=plan-step1
          terraform apply -auto-approve -input=false plan-step1
          echo "--- Waiting 30 seconds for add-ons to stabilize ---"
          sleep 30
          echo "--- Running Terraform Apply: Step 2 (App-of-Apps) ---"
          terraform plan -no-color -out=plan-step2 -var="deploy_app_of_apps=true"
          terraform apply -auto-approve -input=false plan-step2
      - name: Validate Terraform Plan (on push to main)
        if: github.event_name == 'push'
        run: terraform plan -no-color

  # ===================================================================
  # JOB 2 : DESTRUCTION ORCHESTRÉE (LOGIQUE FINALE)
  # ===================================================================
  destroy-addons:
    name: "Orchestrated Destroy for Add-ons"
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy == 'destroy-all-addons'
    
    runs-on: ["self-hosted", "aws-private-runner"]
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/apps

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Configure Kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tws-eks-cluster
          kubectl get nodes

      # --- ÉTAPE 1 : NETTOYAGE CHIRURGICAL DES APPLICATIONS ARGO CD ---
      - name: "Pre-Destroy: Clean Argo CD Applications and Finalizers"
        run: |
          echo "--- [START] Cleaning Argo CD applications ---"
          # On supprime le finalizer pour éviter le blocage si le contrôleur est en cours de suppression
          for app in quiz-prod quiz-staging; do
            if kubectl get application $app -n argocd > /dev/null 2>&1; then
              echo "Patching application '$app' to remove finalizer..."
              kubectl patch application $app -n argocd -p '{"metadata":{"finalizers":[]}}' --type=merge
              # Maintenant on peut supprimer l'application, ce qui supprimera les ressources enfants
              echo "Deleting application '$app'..."
              kubectl delete application $app -n argocd --wait=true --timeout=5m
            else
              echo "Application '$app' not found, skipping."
            fi
          done
          echo "--- [END] Argo CD applications deleted. ---"

      # --- ÉTAPE 2 : DÉSINSTALLATION D'ELASTICSEARCH ---
      - name: "Pre-Destroy: Uninstall Elasticsearch Helm Chart"
        run: |
          echo "--- [START] Uninstalling Elasticsearch to release pods ---"
          helm uninstall elasticsearch -n logging --wait --timeout=5m || echo "Elasticsearch chart not found or already uninstalled."
          echo "--- [END] Elasticsearch chart uninstalled. ---"

      # --- ÉTAPE 3 : NETTOYAGE DES PVCs ET ATTENTE ---
      - name: "Pre-Destroy: Delete All Application PVCs and Wait for Pods"
        run: |
          echo "--- [START] Deleting all application PVCs to unblock termination ---"
          for ns in quiz quiz-staging logging; do
            if kubectl get ns $ns > /dev/null 2>&1; then
              echo "Deleting PVCs in namespace '$ns'..."
              kubectl delete pvc --all -n $ns --ignore-not-found=true
            fi
          done
          
          echo "Waiting up to 5 minutes for pods in stateful namespaces to terminate..."
          for ns in quiz quiz-staging logging; do
             if kubectl get ns $ns > /dev/null 2>&1; then
                kubectl wait --for=delete pod --all -n $ns --timeout=5m --ignore-not-found=true || echo "Timeout or no pods found in $ns to wait for."
             fi
          done
          echo "--- [END] Final cleanup complete. ---"

      # --- ÉTAPE 4 : DESTRUCTION FINALE DE L'INFRASTRUCTURE ---
      - name: "Execute Terraform Destroy (DANGEROUS)"
        run: |
          echo "WARNING: All pre-destroy cleanup steps are done. Proceeding with 'terraform destroy'."
          terraform init
          terraform destroy -auto-approve -var="deploy_app_of_apps=true"
